## Reads in data to make variables.pkl files needed for polymer simulations

## Import wlcstat and gene-conf packages ##
import sys
import os

sys.path.insert(0, os.path.abspath(os.path.join(os.getcwd(), '..', 'wlcstat-master')))

import wlcstat.chromo

sys.path.insert(0, os.path.abspath(os.path.join(os.getcwd(), '..', 'stochastic-gene-conf-master')))
from stochastic_gene_conf import gene_conf

## Import other dependencies ##
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import argparse
import shutil
import time
import pickle
import pandas as pd
from mpl_toolkits import mplot3d
from scipy.signal import find_peaks
from scipy.stats import norm
from scipy.stats import uniform
from pathlib import Path

## Collect input arguments ##
parser = argparse.ArgumentParser()

parser.add_argument("--mode", required = True, choices=["ATAC", "Multi"], help="option to load in just ATAC or to include expression data")

parser.add_argument("--output_dir", required=True, help="where to put output files")

parser.add_argument("--seurat_file", help="path to gene expression file generated by Seurat or File with just gene name for ATAC only")
parser.add_argument("--biomart_file", required=True, help="location of Biomart atlas of gene body and TSS locations")
parser.add_argument("--nucleoatacr_path",required=True, help="location of nucleoatacr output files")

parser.add_argument("--exp_name", type=str, required=True, help="name of experiment to perform analyis on")
parser.add_argument("--i_gene", type=int, default=0, help="row number of gene to analyze in seurat file")
parser.add_argument("--gene_name",type=str, help="name of gene to analyze in seurat file")

parser.add_argument("--half_wrap", type=int, default=73, help="amount of DNA (bp) wrapped around half of a nucleosome bead")

a = parser.parse_args()

## Define strings for output file name ##
filename= a.output_dir + '/' + a.gene_name + '/' + a.exp_name
## Create data output folder if needed ##
isExist = os.path.exists(filename)
if not isExist:
    os.makedirs(filename)

## Check if variables have been defined ##
my_file = Path(filename+'/variables.pkl')
if my_file.is_file():
    print('File already exists. Exiting...')
else:
    ## Collect data from Seurat, Biomart, and NucleoATACR ##
    print('Collecting gene accessibilty pdf and expression...')
    location, signal, Gene_name, Gene_start, Gene_end, TSS_vec, accessible_starts, accessible_ends = gene_conf.import_gene_body(a.seurat_file,a.nucleoatacr_path,a.biomart_file,a.exp_name,a.i_gene,a.half_wrap)
    ## Create CDF in an integrable format ##
    print('Sampling CDF...')
    cdf = gene_conf.create_cdf(location,signal)
    
    half_wrap = a.half_wrap
    ## Output data ##
    if a.mode == "Multi":
        expression = gene_conf.import_gene_expression(a.seurat_file,a.exp_name,a.i_gene)
        with open(filename+'/variables.pkl', 'wb') as file:
            pickle.dump([expression, location, signal, Gene_start, Gene_end, 
                         TSS_vec, accessible_starts, accessible_ends, cdf, half_wrap], file)
    else:
        with open(filename+'/variables.pkl', 'wb') as file:
            pickle.dump([location, signal, Gene_start, Gene_end, 
                         TSS_vec, accessible_starts, accessible_ends, cdf, half_wrap], file)

    print('All Data Loaded')